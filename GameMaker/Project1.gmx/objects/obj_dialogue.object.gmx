<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

//Starts a 1 step alarm to allow variables to be carried over from creation script.
alarm[0] = 1;

//Instance Variables
count = 0;
print = "";
text = "";
norepeat_start = false;
norepeat_end = false;
revert_alteration[] = 0;
c1 = c_white;
c2 = c_white;
c3 = c_white; 
c4 = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed Creation Code

//Informs controller of dialogue played.
ctr.dialogue = id;
user_event(ctr, 1);

//Check for soundfile.
if sound != noone
{
    //Runs code from tree.
    with ctr.tree
    {
        //Plays sound.
        speech = audio_play_sound(other.sound, 100, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Typewriter Effect

//Checks for pause.
if global.pause exit;

//Setup alterations if they exist
alteration_array = explode(",", alteration_string);

for(var i = 0; i &lt; array_length_1d(alteration_array); i++)
{
    alteration_array[i] = real(alteration_array[i]);
}

if norepeat_start = false
{
    def_spd = spd;
    def_font_size = font_size;
    def_color1 = c1;
    def_color2 = c2;
    def_color3 = c3;
    def_color4 = c4;
}

//Add letters over time.
if count &lt; text_length
{
    alteration_start = string_pos("/",text);
    alteration_end = string_pos("\",text);
    count += spd;
    if (alteration_start &lt;= count &amp;&amp; alteration_start != 0)
    {
        norepeat_start = true;
        text = string_delete(text, alteration_start, 1);
        alteration = string_char_at(text, alteration_start);
        if alteration != ""
        {
            text = string_delete(text, alteration_start, 1);
            if alteration == "s"
            {
                if alteration_array[0] != 0
                {
                    spd  = alteration_array[0];
                    revert_alteration[0] = 1;
                }
            }
            if alteration == "t"
            {
                if alteration_array[1] != 0
                {
                    font_size = alteration_array[1];
                    revert_alteration[1] = 1;
                }
            }
            if alteration == "c"
            {
                switch alteration_array[2]
                {
                    case 1:
                        c1 = c_blue;
                        c2 = c_blue;
                        c3 = c_navy;
                        c4 = c_navy;
                        break;                
                    default:
                        break;
                }
                revert_alteration[2] = 1;
            }
        }
        
    }
    else if (alteration_end &lt;= count &amp;&amp; alteration_end != 0)
    {
        norepeat_end = true;
        text = string_delete(text, alteration_end, 1);
        if revert_alteration[0] == 1
        {
            spd = def_spd;
            revert_alteration[0] = 0;
        }
        if revert_alteration[1] == 1
        {
            font_size = def_font_size;
            revert_alteration[1] = 0;
        }
        if revert_alteration[2] == 1
        {
            c1 = def_color1;
            c2 = def_color2;
            c3 = def_color3;
            c4 = def_color4;
            revert_alteration[2] = 0;
        }
    }
    else
    {
        print = string_copy(text, 0, count);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws Text

//Setups Drawing.
draw_setup(c_white, font, fa_left, fa_top, false);

//NEW AND FANCY
draw_text_ext_colour(x, y, print, font_size * 2, maxlength, c1, c2, c3, c4, 1);

//Draws Dialogue Text
//draw_text_ext(x, y, print, font_size * 2, maxlength);

//Setups Drawing.
draw_setup(c_white, ft_arial_20_bold, fa_center, fa_top, false);

//Draws Actor Name
draw_text(diabox.x + 512, diabox.y - 50, actor.name);

//Renders Text at Bottom
draw_set_font(ft_arial_14);
//draw_text(diabox.x + 512, diabox.y + 170, "Press " + string_upper(global.skip_string) + " to continue.");
//Remove this comment to draw press x to continue at buttom.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
