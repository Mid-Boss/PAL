<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set text effect parameters
var i;

text='';

font=-1;                     // text font
duration = 0;                // duration of effect (steps)
delay_before=0;              // delay betweeen text appear and start effect
delay_after=0;               // delay betweeen end of effect and destruction of instance or next effect  
destroy_at_finish = false;   // destroy after end or not
visible_at_start = true;     // visible before effect starts

h_align=fa_middle;   // by default
v_align=fa_center;   // by default

d_step=0;
step=0;

shadow_on      = false;
shadow_scale   = 1;
shadow_shift_x = 4;
shadow_shift_y = 4;
shadow_color   = c_black;
shadow_alpha   = 0.4;

wave_X_on = false;
wave_Y_on = false;
wave_scale_X_on = false;
wave_scale_Y_on = false;
wave_rotation_on = false;
wave_alpha_on = false;

sequence_on=false;
timeline=-1;        // timeline index for after effects
timeline_pos=-1;

separate_letters=false;  // whole string or separated letters
interval = 0;       // time interval between letters  (steps)
hide_at_finish=false;

for (i=0; i&lt;23;i+=1) { d_array [0,i]=0; }
for (i=0; i&lt;10;i+=1) { c_array [0,i]=0; }
for (i=0; i&lt;3; i+=1) { wave_X_array [0,i]=0; }
for (i=0; i&lt;3; i+=1) { wave_Y_array [0,i]=0; }
for (i=0; i&lt;4; i+=1) { wave_scale_X_array [0,i]=0; }
for (i=0; i&lt;4; i+=1) { wave_scale_Y_array [0,i]=0; }
for (i=0; i&lt;4; i+=1) { wave_rotation_array [0,i]=0; }
for (i=0; i&lt;4; i+=1) { wave_alpha_array [0,i]=0; }

d_list=ds_list_create();
ds_list_add(d_list,0);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// object structure description
/*
d_array[_,_] - data array. Contains initial and final parameters of effect for whole text string (i=0) or for every letter,if separated ( i=0..n )

d_array[i,0] - string or letter
d_array[i,1] - X_init
d_array[i,2] - X_dest
d_array[i,3] - Y_init
d_array[i,4] - Y_dest
d_array[i,5] - sc_X_init
d_array[i,6] - sc_X_dest
d_array[i,7] - sc_Y_init
d_array[i,8] - sc_Y_dest
d_array[i,9] -  R_init
d_array[i,10] - R_dest
d_array[i,11] - col_1_init
d_array[i,12] - col_1_dest
d_array[i,13] - col_2_init
d_array[i,14] - col_2_dest
d_array[i,15] - col_3_init
d_array[i,16] - col_3_dest
d_array[i,17] - col_4_init
d_array[i,18] - col_4_dest
d_array[i,19] - A_init
d_array[i,20] - A_dest
d_array[i,21] - step initial
d_array[i,22] - step final

// ==========================================================================
c_array[_,_] - data array. Contains current parameters of effect for whole text string (i=0) or for every letter,if separated ( i=0..n )

c_array[i,0] - current x
c_array[i,1] - current y
c_array[i,2] - current x_scale
c_array[i,3] - current y_scale
c_array[i,4] - current angle
c_array[i,5] - current value of color1
c_array[i,6] - current value of color2
c_array[i,7] - current value of color3
c_array[i,8] - current value of color4
c_array[i,9] -  current alpha

// ==========================================================================
wave_X_array [_,_]  - data array. Contains parameters of swinging movement in horizontal direction

wave_X_array [i,0] - wave_X_amplitude
wave_X_array [i,1] - wave_X_half_periods
wave_X_array [i,2] - wave_X_amplitude_change

// ==========================================================================
wave_Y_array [_,_]  - data array. Contains parameters of swinging movement in vertical direction

wave_Y_array [i,0] - wave_Y_amplitude
wave_Y_array [i,1] - wave_Y_half_periods
wave_Y_array [i,2] - wave_Y_amplitude_change

// ==========================================================================
wave_scale_X_array [_,_]  - data array. Contains parameters of horizontal scale fluctuation

wave_scale_X_array [i,0] - wave_scale_X_high
wave_scale_X_array [i,1] - wave_scale_X_low
wave_scale_X_array [i,2] - wave_scale_X_start_position
wave_scale_X_array [i,3] - wave_scale_X_periods

// ==========================================================================
wave_scale_Y_array [_,_]  - data array. Contains parameters of horizontal scale fluctuation

wave_scale_Y_array [i,0] - wave_scale_Y_high
wave_scale_Y_array [i,1] - wave_scale_Y_low
wave_scale_Y_array [i,2] - wave_scale_Y_start_position
wave_scale_Y_array [i,3] - wave_scale_Y_periods

// ==========================================================================
wave_rotation_array [_,_] - data array. Contains parameters for swinging rotation

wave_rotation_array [i,0] - wave_rotation_amplitude
wave_rotation_array [i,1] - wave_rotation_amplitude_increment
wave_rotation_array [i,2] - wave_rotation_start_position   
wave_rotation_array [i,3] - wave_rotation_periods

// ==========================================================================
wave_alpha_array [_,_]  - data array. Contains parameters of alpha fluctuation

wave_alpha_array [i,0] - wave_alpha_high
wave_alpha_array [i,1] - wave_alpha_low
wave_alpha_array [i,2] - wave_alpha_start_position
wave_alpha_array [i,3] - wave_alpha_periods

// ==========================================================================
d_list - list data structure. Contains information about order of letters to move (if separated)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// list destroy

ds_list_destroy(d_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// actions with text object

var i,j,Duration,Progress,Amplitude,Zero_level;

step+=d_step;


for (j=0; j&lt;ds_list_size(d_list); j+=1)

{

i=ds_list_find_value(d_list,j);

//--------------------------------------------------------------------------------------------------------------
// time to move !!

if ( step &gt; d_array[i,21] )
 {
  Duration  = d_array[i,22]-d_array[i,21];
  Progress = clamp( (step-d_array[i,21])/Duration ,0, 1); 
  
  
    c_array[i,0] = d_array[i,1]+ d_array[i,2]*Progress;   // x
    c_array[i,1] = d_array[i,3]+ d_array[i,4]*Progress;   // y
    
    c_array[i,2] = d_array[i,5]+ d_array[i,6]*Progress;   // image_xscale
    c_array[i,3] = d_array[i,7]+ d_array[i,8]*Progress;   // image_yscale

    c_array[i,4] = d_array[i,9]+ d_array[i,10]*Progress;  // image_angle
 
    c_array[i,5] =  merge_color( d_array[i,11],d_array[i,12],Progress ); // color1
    c_array[i,6] =  merge_color( d_array[i,13],d_array[i,14],Progress ); // color2
    c_array[i,7] =  merge_color( d_array[i,15],d_array[i,16],Progress ); // color3
    c_array[i,8] =  merge_color( d_array[i,17],d_array[i,18],Progress ); // color4
 
    c_array[i,9] = d_array[i,19]+ d_array[i,20]*Progress;  // image_alpha
    
    
    
//==== waves =============================================================================================    
if (wave_X_on==true) 
     {
       c_array[i,0]+=sin((pi*wave_X_array [i,1])*Progress)*(wave_X_array [i,0]+(step-d_array[i,21])*wave_X_array [i,2]);
     }  
     
if (wave_Y_on==true) 
     {
       c_array[i,1]+=sin((pi*wave_Y_array [i,1])*Progress)*(wave_Y_array [i,0]+(step-d_array[i,21])*wave_Y_array [i,2]);
     }  
     
if (wave_scale_X_on==true) 
     {
      Amplitude =  ( wave_scale_X_array [i,0]-wave_scale_X_array [i,1])*0.5;
      Zero_level = ( wave_scale_X_array [i,0]+wave_scale_X_array [i,1])*0.5;
       
       c_array[i,2]=Zero_level+sin( (wave_scale_X_array [i,2]*2*pi) + (wave_scale_X_array [i,3]*2*pi*Progress) )*Amplitude;
     }       
          
if (wave_scale_Y_on==true) 
     {
      Amplitude =  (wave_scale_Y_array [i,0]-wave_scale_Y_array [i,1])*0.5;
      Zero_level = (wave_scale_Y_array [i,0]+wave_scale_Y_array [i,1])*0.5;
       
       c_array[i,3]=Zero_level+sin( (wave_scale_Y_array [i,2]*2*pi) + (wave_scale_Y_array [i,3]*2*pi*Progress) )*Amplitude;
     }  
     
if (wave_rotation_on==true) 
     {
      Amplitude =  wave_rotation_array [i,0]-(step-d_array[i,21])*wave_rotation_array [i,1] ;
      Zero_level = c_array[i,4];
       
       c_array[i,4]=Zero_level+sin( (wave_rotation_array [i,2]*2*pi) + (wave_rotation_array [i,3]*2*pi*Progress) )*Amplitude;
     }  
     
if (wave_alpha_on==true) 
     {
      Amplitude =  (wave_alpha_array [i,0]-wave_alpha_array [i,1])*0.5;
      Zero_level = (wave_alpha_array [i,0]+wave_alpha_array [i,1])*0.5;
       
       c_array[i,9]=Zero_level+sin( (wave_alpha_array [i,2]*2*pi) + (wave_alpha_array [i,3]*2*pi*Progress) )*Amplitude;
     }                    
//==== end of waves =============================================================================================  
    
 } 
 
   else
 {
    c_array[i,0] = d_array[i,1]; // x
    c_array[i,1] = d_array[i,3]; // y
    
    c_array[i,2] = d_array[i,5]; // image_xscale
    c_array[i,3] = d_array[i,7]; // image_yscale

    c_array[i,4] = d_array[i,9]; // image_angle
 
    c_array[i,5] =  d_array[i,11]; // color1
    c_array[i,6] =  d_array[i,13]; // color2
    c_array[i,7] =  d_array[i,15]; // color3
    c_array[i,8] =  d_array[i,17]; // color4
 
    c_array[i,9] = d_array[i,19];  // image_alpha
  
 }  
   
//--------------------------------------------------------------------------------------------------------------
}

if (step==delay_before+duration+delay_after) { event_perform(ev_other,ev_user15);} 

 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// what happens after effect ?

if (destroy_at_finish==true)
   {
     instance_destroy();
   }
 else
   {
    if (sequence_on==true)
      {
        timeline_index=timeline;
        timeline_position= timeline_pos;
        timeline_running = true;
        timeline_speed = 1;
      }     
   } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw text

var i,j;

for (j=0; j&lt;ds_list_size(d_list); j+=1)

{

i=ds_list_find_value(d_list,j);


if (step &gt; d_array[i,21] || visible_at_start==true)
if (step &lt; d_array[i,22] || hide_at_finish==false)

 {
    draw_set_font(font);
    draw_set_halign(h_align);
    draw_set_valign(v_align);
    
    
 if (shadow_on==true)
       { 
         draw_set_color(shadow_color);
         draw_set_alpha(c_array[i,9]*shadow_alpha);
         draw_text_transformed( c_array[i,0]+shadow_shift_x,  // x
                                c_array[i,1]+shadow_shift_y,  // y
                                d_array[i,0],                 // text
                                c_array[i,2]*shadow_scale,    // xscale 
                                c_array[i,3]*shadow_scale,    // yscale
                                c_array[i,4]);                // angle 
         draw_set_alpha(1);                         
       }
           
// draw_text_transformed_color(X,Y,d_array[i,0],sc_X,sc_Y,Rot,C1,C2,C3,C4,Alpha);
   
   draw_text_transformed_color ( c_array[i,0], // x
                                 c_array[i,1], // y  
                                 d_array[i,0], // text   
                                 c_array[i,2], // xscale
                                 c_array[i,3], // yscale
                                 c_array[i,4], // angle 
                                 c_array[i,5], // color1
                                 c_array[i,6], // color2
                                 c_array[i,7], // color3
                                 c_array[i,8], // color4 
                                 c_array[i,9]);// alpha
   
 }
 
}

 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
